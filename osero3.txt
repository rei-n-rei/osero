const canvas = document.getElementById("gridCanvas");
const ctx = canvas.getContext("2d");

const rows = 8;
const cols = 8;
const cellSize = canvas.width / cols;
let board = Array.from({ length: rows }, () => Array(cols).fill(null));
let currentTurn = "black";

// グリッド線の描画
function drawGrid() {
    for (let i = 0; i <= rows; i++) {
        ctx.beginPath();
        ctx.moveTo(0, i * cellSize);
        ctx.lineTo(canvas.width, i * cellSize);
        ctx.stroke();
    }

    for (let j = 0; j <= cols; j++) {
        ctx.beginPath();
        ctx.moveTo(j * cellSize, 0);
        ctx.lineTo(j * cellSize, canvas.height);
        ctx.stroke();
    }
}

// クリック時の処理
canvas.addEventListener("click", function(event) {
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    const col = Math.floor(x / cellSize);
    const row = Math.floor(y / cellSize);

    if (board[row][col] === null) {
        board[row][col] = currentTurn;
        drawCircle(row, col, currentTurn);
        currentTurn = currentTurn === "black" ? "white" : "black"; // 色を交互に変更
    }
});

// 円の描画（白の場合は外形を黒色に）
function drawCircle(row, col, color) {
    ctx.beginPath();
    ctx.arc(col * cellSize + cellSize / 2, row * cellSize + cellSize / 2, cellSize / 3, 0, Math.PI * 2);
    
    if (color === "white") {
        ctx.fillStyle = "white";
        ctx.strokeStyle = "black"; // 外形を黒色にする
        ctx.lineWidth = 2; // 枠線の太さを調整
        ctx.fill();
        ctx.stroke(); // 外形線の描画
    } else {
        ctx.fillStyle = "black";
        ctx.fill();
    }
}

drawGrid();